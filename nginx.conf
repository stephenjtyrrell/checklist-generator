events {
    worker_connections 1024;
}

http {
    upstream dotnet_app {
        server 127.0.0.1:5000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # File upload size limit (50MB to match .NET app)
        client_max_body_size 50M;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Main application proxy
        location / {
            # Apply rate limiting
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://dotnet_app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection keep-alive;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        # Static files caching
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            proxy_pass http://dotnet_app;
            expires 1M;
            add_header Cache-Control "public, immutable";
        }
    }

    # HTTPS server block (for future SSL certificate)
    server {
        listen 443 ssl http2;
        server_name _;
        
        # Placeholder SSL configuration
        # ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
        # ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
        
        # For now, redirect HTTPS to HTTP
        return 301 http://$server_name$request_uri;
    }
}
