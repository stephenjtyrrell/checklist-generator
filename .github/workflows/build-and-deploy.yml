name: Build and Deploy Checklist Generator

on:
  push:
    branches: [ main, feature/*, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_codespace:
        description: 'Trigger Codespace deployment'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'ChecklistGenerator/ChecklistGenerator.csproj'

jobs:
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: 🔨 Build application
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
      
    - name: 🧪 Run tests (if any exist)
      run: |
        if find . -name "*.Test*.csproj" -o -name "*Test*.csproj" -o -name "*Tests.csproj" | grep -q .; then
          echo "Found test projects, running tests..."
          dotnet test --configuration Release --no-build --verbosity normal
        else
          echo "No test projects found, skipping tests."
        fi
      
    - name: 📊 Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./publish
      
    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: checklist-generator-build
        path: ./publish/
        retention-days: 7

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔨 Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: checklist-generator:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-notification:
    name: Codespace Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_to_codespace == 'true'
    
    steps:
    - name: 🚀 Deployment Ready Notification
      run: |
        echo "✅ Build successful! Ready for Codespace deployment."
        echo ""
        echo "🎯 To deploy to GitHub Codespaces:"
        echo "1. Go to: https://github.com/${{ github.repository }}"
        echo "2. Click 'Code' → 'Codespaces' → 'Create codespace'"
        echo "3. Run: ./start.sh"
        echo ""
        echo "🌐 Your app will be available on port 5000"
        echo "📝 Build completed at: $(date)"
        echo "📊 Commit SHA: ${{ github.sha }}"
        
    - name: 📢 Create deployment comment (on PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Deployment Ready!**
            
            ✅ Build completed successfully for commit \`${{ github.sha }}\`
            
            **Deploy to Codespaces:**
            1. Click \`Code\` → \`Codespaces\` → \`Create codespace\`
            2. Run \`./start.sh\` in the terminal
            3. Access your app on the forwarded port 5000
            
            **Docker Image:** Ready for container deployment
            **Artifacts:** Build outputs available for 7 days`
          })

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 🔍 Run security scan
      run: |
        dotnet restore ${{ env.PROJECT_PATH }}
        echo "🔍 Checking for vulnerable packages..."
        dotnet list package --vulnerable 2>&1 | tee security-report.txt
        if grep -q "has the following vulnerable packages" security-report.txt; then
          echo "⚠️ Vulnerable packages found!"
          cat security-report.txt
          exit 1
        else
          echo "✅ No vulnerable packages found"
        fi

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📊 Check build size
      run: |
        dotnet restore ${{ env.PROJECT_PATH }}
        dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ./size-check
        
        echo "📊 Build Size Analysis:"
        du -sh ./size-check
        echo ""
        echo "📁 Largest files:"
        find ./size-check -type f -exec du -h {} + | sort -rh | head -10
        
        # Check if build is too large (>100MB warning)
        SIZE_MB=$(du -m ./size-check | cut -f1)
        if [ $SIZE_MB -gt 100 ]; then
          echo "⚠️ Warning: Build size is ${SIZE_MB}MB (>100MB)"
        else
          echo "✅ Build size is acceptable: ${SIZE_MB}MB"
        fi
